1-difference  between  soft reset  & hard  reset  & warm reset  & Poweroff-Poweron    ?   
1. Soft Reset
A reset triggered by software (e.g., writing to a specific register).
Usually resets only part of the system or a peripheral.
CPU state might be preserved partially.
Faster than a full reset because it doesn't restart the entire hardware.
Often used to recover from minor errors or restart a module without full power cycling.
Example: triggering a system reset via the RCC’s software reset register.

2. Hard Reset
A full hardware reset of the microcontroller.
Resets the entire chip, including CPU, peripherals, and internal registers.
Happens when a reset pin (NRST) is asserted (pulled low).
Restores the device to its initial power-on state.
Used when the system needs complete restart due to serious faults.

3. Warm Reset
Another term sometimes used interchangeably with soft reset.
Implies a reset without removing power.
The system is restarted without full power cycling.
Keeps power on but resets the CPU and certain peripherals.
Useful when you want a quicker restart than a cold boot (poweroff-poweron).

4. Poweroff-Poweron (Cold Reset or Power Cycle)
Turning off the power supply to the microcontroller and then turning it back on.
The entire system loses power.
All volatile registers and states are cleared.
This is the slowest reset type because hardware has to restart fully.
Ensures all hardware and internal states are reinitialized from scratch.


| Reset Type       | Trigger                                 | Effect                                          | Speed       | Power Status During Reset |
| ---------------- | --------------------------------------- | ----------------------------------------------- | ----------- | ------------------------- |
| Soft Reset       | Software (register write)               | Partial reset, often CPU or module reset        | Fast        | Power remains ON          |
| Hard Reset       | Hardware pin (NRST)                     | Full chip reset, all internal registers cleared | Medium-Fast | Power remains ON          |
| Warm Reset       | Software or reset signal, no power loss | Reset CPU & some peripherals, no power loss     | Fast        | Power remains ON          |
| Poweroff-Poweron | Remove and restore power supply         | Full system reboot, all states lost             | Slow        | Power OFF then ON         |
_____________________________________________________________________________________________________________________________________________________________________

2- Does a Disabled Peripheral Consume Power?HOW
Yes, but less than when enabled. 
1.Power Supply Remains On:
Even if a peripheral is disabled, the MCU still supplies power to its circuitry. Power rails are connected, so static (leakage) current flows through transistors inside the peripheral.

2.Clock Signal (If Running):
If the peripheral’s clock is still running (not gated off), its internal logic gates still toggle, causing dynamic power consumption (switching power).
Toggling consumes more power because charging and discharging internal capacitances requires energy.

3.When Disabled but Clock Gated Off:
Disabling usually means turning off the clock to that peripheral (via RCC clock gating).
Without a clock, the internal logic doesn’t toggle, so dynamic power drops drastically, but the peripheral still consumes a small amount of static power due to leakage currents.

4.Leakage Current:
Transistors leak a tiny current even when not switching, especially at higher temperatures or in modern low-power technologies.
This leakage current is small but constant as long as power is applied.

Summary:
Disabled peripheral with clock ON:
Consumes static + dynamic power → moderately high power.
Disabled peripheral with clock OFF (clock gated):
Consumes mostly static power (leakage only) → much lower power.
Peripheral power domain OFF (power gated):
Almost no power consumption.

5.Enable-Check Circuits & Power Consumption in Disabled Peripherals
Inside most peripherals, there are enable-check or gating circuits that control whether the peripheral is active or not.
These circuits monitor the enable signal (e.g., a bit in an enable register).
Even when the peripheral is disabled, these enable-check logic blocks are still powered and clocked (unless their clock is gated off separately).
Because these circuits are always “on” to detect if/when the peripheral should be enabled, they consume some static power continuously.
Also, if the clock is still running, some internal logic in the enable-check circuitry may toggle, contributing to dynamic power consumption.
------->Why Enable-Check Circuits Matter:
They prevent the peripheral from operating when disabled but themselves can’t be completely powered down unless the entire peripheral clock or power domain is gated.
This is why simply “disabling” a peripheral (setting enable bit to 0) does not completely stop power consumption.
To save more power, the clock to the peripheral must also be disabled via RCC, stopping toggling and lowering power significantly.
For ultra-low power, some MCUs support power gating, which cuts off power to the entire peripheral including the enable-check circuits.

Summary:
Condition	                 Enable-Check Circuit Status	   Power Consumption Impact
Peripheral Enabled	         Active & Clocked	           Full power (dynamic + static)
Peripheral Disabled, Clock On	 Active & Clocked	           Static + some dynamic power
Peripheral Disabled, Clock Off	 Active but clock stopped           Mostly static power (leakage only)
Peripheral Power Gated Off	 Disabled	                   Minimal power (almost zero)















